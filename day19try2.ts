const input = `--- scanner 0 ---
602,365,-604
309,-819,-775
-589,731,-551
-803,817,548
325,-731,774
-855,-664,304
-91,96,-88
47,-34,29
692,405,-767
513,535,660
340,-633,-836
399,500,577
-805,780,754
-594,682,-384
-814,882,768
316,-768,-918
-747,-756,401
-763,-608,329
-842,-465,-620
382,-782,771
370,550,692
413,-882,725
572,506,-721
-647,-437,-631
-595,663,-432
-612,-421,-623

--- scanner 1 ---
651,-500,-434
-857,735,662
635,642,-754
729,-486,-497
-415,-410,836
-526,-541,-481
563,506,854
521,543,781
463,-596,701
35,98,137
635,-455,-352
-494,-398,-496
-882,827,718
-432,777,-726
-638,775,-763
589,-469,732
-461,-441,936
-609,-427,-446
699,656,-710
-785,719,810
620,580,892
-117,-14,37
665,837,-755
-412,-353,785
519,-469,653
-418,786,-828

--- scanner 2 ---
-602,682,731
-626,-811,-733
531,-555,307
-644,-532,552
636,394,-728
-637,-714,-596
858,599,268
523,-938,-917
-693,-417,644
694,-645,267
-367,380,-747
-709,814,766
-296,374,-718
11,-105,-29
462,-907,-731
902,672,241
596,350,-706
380,-931,-866
745,589,274
570,463,-772
-581,744,793
-543,-740,-669
577,-675,408
-717,-647,635
-321,430,-859

--- scanner 3 ---
655,-559,-732
-774,-491,-781
-886,765,893
-863,-564,-831
246,659,-503
-912,601,889
-536,-832,880
687,912,426
239,687,-383
-687,701,-387
-729,-455,-832
-659,765,-476
620,-558,-753
-535,-781,854
-801,702,-508
469,-627,665
-66,-35,42
-959,723,785
612,-653,-584
236,737,-406
453,-625,497
24,107,-28
573,810,500
437,-634,658
739,754,483
-393,-747,893

--- scanner 4 ---
-488,-806,-408
448,-742,758
-393,610,-389
424,-690,782
-653,374,883
-128,-72,149
413,-866,-645
-428,606,-632
-615,583,930
370,-780,-649
462,775,839
-653,-721,-433
336,904,-366
-745,-717,523
458,668,890
-650,-591,561
375,778,-473
23,111,18
495,632,810
-813,-654,495
458,-755,-678
-632,-731,-409
-436,516,-525
395,757,-456
-636,490,835
456,-785,686

--- scanner 5 ---
615,449,405
606,321,517
88,-78,-139
-780,-416,-721
319,-388,-500
583,576,506
335,-454,686
-491,528,286
362,-336,-562
422,626,-694
-550,-737,540
-380,-731,442
-656,-443,-717
345,-372,-486
-429,517,354
306,-441,462
-681,865,-712
40,35,20
-596,-326,-705
438,618,-659
-662,817,-711
-730,698,-717
-477,-728,465
307,-464,681
466,629,-464
-498,315,353

--- scanner 6 ---
933,-730,666
898,428,-816
-798,703,-780
-292,-473,307
-704,359,748
492,-384,-761
591,643,436
-610,390,838
-674,-821,-324
5,97,-82
-718,-847,-323
-734,760,-785
-247,-490,537
632,-426,-855
-614,488,810
547,664,472
863,545,-823
868,-627,599
-438,-842,-318
159,-67,-103
502,561,535
-244,-385,369
44,-22,68
789,523,-817
497,-470,-748
-782,790,-865
829,-819,656

--- scanner 7 ---
421,593,705
-550,-568,554
-648,616,-373
-667,-598,413
350,824,-296
-496,-305,-771
366,810,-270
394,589,829
-839,599,711
-640,651,-389
-435,-336,-585
720,-826,790
-887,598,730
664,-529,-450
744,-596,781
671,-711,698
-720,593,779
314,748,-313
-353,-312,-720
-33,45,33
304,605,645
-651,846,-417
653,-432,-587
-504,-688,453
570,-503,-523

--- scanner 8 ---
502,316,366
880,-596,771
-831,-328,444
881,-705,637
-780,752,498
-407,573,-788
830,-669,682
781,-601,-747
-805,-379,443
-44,7,73
-616,-533,-561
405,860,-687
-448,-535,-545
385,744,-752
-493,564,-761
633,-507,-704
96,-60,-112
474,778,-734
-609,-526,-529
-884,640,432
538,476,462
-844,-413,301
-766,548,510
464,523,347
-452,423,-816
802,-602,-712

--- scanner 9 ---
679,579,-546
-633,765,777
-74,55,50
-511,831,689
534,-511,647
-894,-391,-703
518,-679,645
-844,435,-663
638,-676,-790
-715,524,-653
-755,584,-657
-821,-283,-745
401,747,758
752,-750,-892
74,114,-53
-328,-283,767
448,855,687
502,-518,654
691,504,-368
-471,-296,852
424,937,726
-636,843,757
-470,-322,801
-847,-287,-581
804,-693,-734
727,586,-487

--- scanner 10 ---
-334,524,-772
691,579,544
780,848,-553
-570,-696,-297
-243,518,-715
433,-569,471
-658,-661,831
-683,532,596
536,-690,-555
603,-706,-640
-570,-594,-342
-595,-729,859
-726,540,668
-595,-661,-297
613,-696,-418
549,-552,519
-532,-566,793
-631,508,572
642,-531,424
727,542,464
802,793,-444
834,546,515
163,-56,42
92,105,169
827,829,-636
-342,526,-523

--- scanner 11 ---
-516,598,703
846,-385,-755
-587,432,-500
-396,552,804
866,-487,-762
-486,715,844
-258,-672,467
-623,381,-545
-373,-623,559
79,-20,37
841,-581,380
758,879,843
748,766,837
558,724,-720
-488,-696,476
398,760,-816
-514,382,-411
824,-451,-634
605,798,-835
973,-688,345
831,923,870
-287,-786,-566
-362,-783,-482
-219,-670,-491
903,-560,318
175,124,-94

--- scanner 12 ---
860,572,385
-469,-675,610
657,831,-653
653,-537,599
646,-524,597
-584,-771,-719
830,-308,-384
634,748,-601
737,497,486
-549,556,677
-865,819,-467
-819,707,-417
-890,678,-411
772,528,512
-110,-34,-4
-493,-684,380
-477,-806,-851
51,94,55
683,635,-686
-605,-833,-781
-643,629,703
851,-315,-388
662,-324,-380
-560,693,774
483,-580,577
-542,-592,495

--- scanner 13 ---
-473,-301,-612
728,-369,-775
661,-457,398
-451,-784,771
682,855,494
-663,476,-657
-465,-344,-540
19,138,-38
618,489,-694
763,-457,353
561,528,-886
-434,668,763
781,766,576
796,-432,-803
551,424,-797
-450,520,691
-459,-685,579
-342,612,788
728,-432,353
-589,438,-714
-441,-396,-516
633,-495,-737
-457,-693,828
745,810,597
-626,549,-615

--- scanner 14 ---
726,281,-938
939,-510,600
-786,344,556
-527,457,-857
-624,-679,-560
-273,-598,248
-508,-567,-540
562,277,-912
573,687,713
-510,600,-930
-277,-563,365
415,744,661
650,-590,-846
-356,-496,263
-649,439,559
101,-10,-68
644,-441,-935
-633,402,626
820,-592,636
604,385,-985
654,-530,-806
-534,531,-734
172,-159,-172
761,-585,588
-599,-694,-599
517,670,547

--- scanner 15 ---
638,-635,540
413,505,782
693,689,-524
-581,-507,-485
405,505,724
-492,359,-539
820,-460,-340
-615,-518,453
-498,430,-510
813,-317,-391
596,700,-661
277,532,678
-654,679,468
789,-399,-526
808,-633,532
622,606,-588
-548,384,-398
617,-620,468
-817,-544,395
-468,-533,-551
-804,-555,439
-42,1,-10
-685,630,542
-739,590,530
-512,-573,-529

--- scanner 16 ---
-582,-633,-788
-672,-796,-748
-481,-916,556
712,-643,529
-493,631,-618
609,-580,-422
145,-139,98
614,-413,-471
-350,663,-603
615,-461,-490
-771,719,795
711,-522,643
733,650,371
-737,758,937
611,754,418
-25,-37,3
-822,745,794
775,758,444
823,519,-336
-445,-967,601
-552,-750,-647
-554,-966,467
775,-611,671
834,739,-271
-379,548,-653
825,725,-373

--- scanner 17 ---
344,530,759
605,-626,-721
-630,517,-324
768,461,-745
767,435,-796
417,422,801
-680,632,-353
910,422,-711
602,-704,-701
-645,549,-467
-298,441,860
727,-692,-633
-692,-628,-426
523,-385,709
-400,455,851
-774,-612,-381
391,426,637
483,-445,713
-371,-642,911
394,-296,719
-416,-676,730
32,57,64
-629,-706,-412
-372,-612,716
-363,661,849

--- scanner 18 ---
-546,518,-970
-348,-719,-535
629,-631,-926
467,-598,387
-525,425,-875
683,-435,-904
-416,-782,-563
613,589,-415
674,-607,-948
-529,-796,369
99,-11,-195
-733,541,592
-768,545,349
-725,451,485
510,619,-569
508,-420,334
391,619,-422
516,573,470
-511,-656,-601
528,-484,269
485,444,411
135,-123,-3
595,508,440
-508,309,-923
-508,-786,393
-9,17,-25
-673,-871,368

--- scanner 19 ---
613,816,571
859,-415,686
941,-554,-719
890,653,-699
-592,442,416
-682,504,287
-779,-348,319
-222,883,-457
830,-591,-620
-714,-359,539
711,-399,758
-677,-357,333
524,717,489
903,-628,-662
-270,945,-545
-588,414,318
-225,715,-562
767,-307,783
955,586,-802
-706,-297,-764
-661,-478,-798
4,50,1
851,596,-891
569,780,592
-705,-492,-734

--- scanner 20 ---
712,-646,852
305,725,-631
-461,515,838
781,-599,934
722,435,597
684,454,390
-635,-335,-688
648,550,550
801,-664,818
-859,788,-370
-105,14,-14
384,-624,-528
44,112,79
356,770,-595
553,-616,-433
-542,-562,642
-546,-421,560
-569,-389,725
-640,-441,-639
-527,636,816
-563,508,858
-862,704,-295
306,859,-522
-746,779,-227
-586,-456,-713
405,-659,-527

--- scanner 21 ---
770,-845,-412
-875,290,-366
855,-572,514
710,419,-580
687,-579,427
-872,458,-471
3,-176,80
749,394,-565
-415,669,378
796,-601,469
-445,-403,-802
-509,759,409
-385,-864,779
719,-968,-369
379,508,714
575,484,645
452,491,571
-337,-944,809
721,-887,-290
-321,-859,722
-681,-397,-823
-505,731,507
-401,-402,-828
-827,228,-454
769,510,-453

--- scanner 22 ---
-382,506,667
431,635,-275
623,-464,808
-432,595,594
670,586,962
373,-457,-496
-715,-749,695
672,-372,923
469,709,-404
-768,-383,-496
453,828,-252
-598,-608,665
-887,-451,-502
-381,640,558
696,-381,693
-737,710,-662
-705,568,-599
-826,682,-598
346,-333,-492
256,-517,-508
783,577,819
-552,-709,785
786,661,894
-29,119,70
-935,-432,-501

--- scanner 23 ---
-55,-79,-166
-784,-695,-688
-658,-726,-561
-612,760,550
211,-863,-718
741,-533,554
371,-799,-760
-612,358,-547
-582,761,745
-684,-848,414
647,489,433
608,679,-734
-596,440,-592
-518,503,-578
-548,716,564
667,-344,589
623,803,-589
-627,-886,488
601,596,391
323,-896,-659
545,375,404
637,-562,556
-728,-647,-561
-726,-775,451
721,747,-679

--- scanner 24 ---
416,-323,416
-749,897,-628
412,-346,-550
638,-263,419
664,933,413
813,710,-651
-687,727,850
-593,-541,572
-597,-431,-661
766,672,-860
-642,889,-718
674,891,489
-697,579,890
-664,796,888
265,-227,-550
-95,60,-6
-730,-527,481
258,-449,-580
718,689,-744
-597,-497,503
-506,932,-624
683,764,473
-568,-321,-725
-627,-352,-596
419,-285,400`;

const inputEx = `--- scanner 0 ---
404,-588,-901
528,-643,409
-838,591,734
390,-675,-793
-537,-823,-458
-485,-357,347
-345,-311,381
-661,-816,-575
-876,649,763
-618,-824,-621
553,345,-567
474,580,667
-447,-329,318
-584,868,-557
544,-627,-890
564,392,-477
455,729,728
-892,524,684
-689,845,-530
423,-701,434
7,-33,-71
630,319,-379
443,580,662
-789,900,-551
459,-707,401

--- scanner 1 ---
686,422,578
605,423,415
515,917,-361
-336,658,858
95,138,22
-476,619,847
-340,-569,-846
567,-361,727
-460,603,-452
669,-402,600
729,430,532
-500,-761,534
-322,571,750
-466,-666,-811
-429,-592,574
-355,545,-477
703,-491,-529
-328,-685,520
413,935,-424
-391,539,-444
586,-435,557
-364,-763,-893
807,-499,-711
755,-354,-619
553,889,-390

--- scanner 2 ---
649,640,665
682,-795,504
-784,533,-524
-644,584,-595
-588,-843,648
-30,6,44
-674,560,763
500,723,-460
609,671,-379
-555,-800,653
-675,-892,-343
697,-426,-610
578,704,681
493,664,-388
-671,-858,530
-667,343,800
571,-461,-707
-138,-166,112
-889,563,-600
646,-828,498
640,759,510
-630,509,768
-681,-892,-333
673,-379,-804
-742,-814,-386
577,-820,562

--- scanner 3 ---
-589,542,597
605,-692,669
-500,565,-823
-660,373,557
-458,-679,-417
-488,449,543
-626,468,-788
338,-750,-386
528,-832,-391
562,-778,733
-938,-730,414
543,643,-506
-524,371,-870
407,773,750
-104,29,83
378,-903,-323
-778,-728,485
426,699,580
-438,-605,-362
-469,-447,-387
509,732,623
647,635,-688
-868,-804,481
614,-800,639
595,780,-596

--- scanner 4 ---
727,592,562
-293,-554,779
441,611,-461
-714,465,-776
-743,427,-804
-660,-479,-426
832,-632,460
927,-485,-438
408,393,-506
466,436,-512
110,16,151
-258,-428,682
-393,719,612
-211,-452,876
808,-476,-593
-575,615,604
-485,667,467
-680,325,-822
-627,-443,-432
872,-547,-609
833,512,582
807,604,487
839,-516,451
891,-625,532
-652,-548,-490
30,-46,-14`;

const scanners = input.split(/--- scanner [0-9]+ ---\n/).splice(1).map(s => s.trim().split('\n').map(r => r.split(',').map(i => Number(i))));

function rotatePoint(pt: number[], xRot: number, yRot: number, zRot: number): number[] {
    const yaw = yRot*Math.PI/2;
    const pitch = xRot*Math.PI/2;
    const roll = zRot*Math.PI/2;

    var cosa = Math.cos(yaw);
    var sina = Math.sin(yaw);

    var cosb = Math.cos(pitch);
    var sinb = Math.sin(pitch);

    var cosc = Math.cos(roll);
    var sinc = Math.sin(roll);

    var Axx = cosa*cosb;
    var Axy = cosa*sinb*sinc - sina*cosc;
    var Axz = cosa*sinb*cosc + sina*sinc;

    var Ayx = sina*cosb;
    var Ayy = sina*sinb*sinc + cosa*cosc;
    var Ayz = sina*sinb*cosc - cosa*sinc;

    var Azx = -sinb;
    var Azy = cosb*sinc;
    var Azz = cosb*cosc;

    return [
        Math.round(Axx*pt[0] + Axy*pt[1] + Axz*pt[2]),
        Math.round(Ayx*pt[0] + Ayy*pt[1] + Ayz*pt[2]),
        Math.round(Azx*pt[0] + Azy*pt[1] + Azz*pt[2]),
    ];
}

function generateScannerRotations(scanner: number[][]): number[][][] {
    let ret: number[][][] = [];

    for (let xRot=0; xRot<4; xRot++) {
        for (let yRot=0; yRot<4; yRot++) {
            ret.push(scanner.map(pt => rotatePoint(pt, 0, yRot, xRot)));
        }
        for (let zRot=1; zRot<=3; zRot+=2) {
            ret.push(scanner.map(pt => rotatePoint(pt, zRot, 0, xRot)));
        }
    }

    return ret;
}

function pointAdd(pt1: number[], pt2: number[]): number[] {
    return [pt2[0] + pt1[0], pt2[1] + pt1[1], pt2[2] + pt1[2]];
}

function pointDiff(pt1: number[], pt2: number[]): number[] {
    return [pt2[0] - pt1[0], pt2[1] - pt1[1], pt2[2] - pt1[2]];
}

function pointEqual(diff1: number[], diff2: number[]): boolean {
    return (diff1[0] === diff2[0] && diff1[1] === diff2[1] && diff1[2] === diff2[2]);
}

const scannersRot = scanners.map((s, i) => i === 0 ? [s] : generateScannerRotations(s));

// console.log(scanners[0]);
// console.log(scannersRot[0][0]);

const lockedRotation: {[key: number]: number} = {
    0: 0,
};

const scannerOffset: {[key: number]: number[]} = {
    0: [0,0,0],
};

function scanForLinks(i: number): void {
    console.log('Scanning: ' + i);

    if (!(i in lockedRotation) || !(i in scannerOffset)) {
        throw 'noData';
    }

    const scanRotI = scannersRot[i][lockedRotation[i]];

    for (let h=0; h<scanners.length; h++) {
        if (h === i) {
            continue;
        }

        if (h in scannerOffset) {
            // already explored
            continue;
        }

        const scanRotsH = scannersRot[h];

        for (let hRot=0; hRot<scanRotsH.length; hRot++) {
            if (h in lockedRotation && hRot !== lockedRotation[h]) {
                continue;
            }

            const scanRotH = scanRotsH[hRot];

            let subLookup: {[key: number]: number} = {};
            for (let iPt1=0; iPt1<scanRotI.length; iPt1++) {
                for (let iPt2=iPt1+1; iPt2<scanRotI.length; iPt2++) {
                    const iPtDiff = pointDiff(scanRotI[iPt2], scanRotI[iPt1]);

                    for (let hPt1=0; hPt1<scanRotH.length; hPt1++) {
                        for (let hPt2=0; hPt2<scanRotH.length; hPt2++) {
                            if (hPt1 === hPt2) {
                                continue;
                            }
    
                            const hPtDiff = pointDiff(scanRotH[hPt2], scanRotH[hPt1]);
                            if (pointEqual(iPtDiff, hPtDiff)) {
                                if (subLookup[iPt1] !== undefined && subLookup[iPt1] !== hPt1) {
                                    throw 'uh oh 1';
                                }
                                if (subLookup[iPt2] !== undefined && subLookup[iPt2] !== hPt2) {
                                    throw 'uh oh 2';
                                }
                                subLookup[iPt1] = hPt1;
                                subLookup[iPt2] = hPt2;
                                hPt1 = hPt2 = scanRotH.length;
                            }
                        }
                    }
                }
            }

            const count = Object.keys(subLookup).length;
            // console.log('try: ' + i + '/' + h + ': ' + count);
            if (count >= 12) {
                if (!(h in lockedRotation)) {
                    console.log('Locking ' + h + ' to ' + hRot);
                    lockedRotation[h] = hRot;
                }

                const firstKey = Object.entries(subLookup)[0];
                const offset = pointDiff(scanRotH[firstKey[1]], scanRotI[Number(firstKey[0])]);
                const totalOffset = pointAdd(scannerOffset[i], offset);
                scannerOffset[h] = totalOffset;

                console.log('bestMatch of ' + i + '/' + h + ': ' + offset);

                scanForLinks(h);
            }
        }
    }
}

scanForLinks(0);

console.log(scannerOffset);

// make unique list of pts
const ptList: number[][] = [];

for (let i=0; i<scanners.length; i++) {
    const offset = scannerOffset[i];
    const scanRotI = scannersRot[i][lockedRotation[i]];
    scanRotI.map(pt => pointAdd(offset, pt)).forEach(pt => {
        if (!ptList.some(checkPt => pointEqual(checkPt, pt))) {
            ptList.push(pt);
        }
    });
}

console.log(ptList.length);

// part 2
let largestDistance = -1;
for (let i=0; i<scanners.length; i++) {
    for (let h=i+1; h<scanners.length; h++) {
        const manPt = pointDiff(scannerOffset[h], scannerOffset[i]);
        const manDist = Math.abs(manPt[0]) + Math.abs(manPt[1]) + Math.abs(manPt[2]);
        largestDistance = Math.max(manDist, largestDistance);
    }
}

console.log(largestDistance);